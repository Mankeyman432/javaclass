Connecting class methods and class fields

-We have both fields ( like name, horsePower in Car ) and methods ( start and stop in Car). Lets see what is the connection between them

class Car{
        String name;
        int horsePower;

        void start(){
            System.out.println("starting");
        }

        void stop(){
            System.out.println("stopping");
        }
    } 

-In application class

 Car c1 = new Car();
    c1.name = "bmw";
    c1.horsePower = 200;
    c1.start();
    c1.stop();

    Car c2 = new Car();
    c2.name = "honda";
    c2.horsePower = 50;
    c2.start();
    c2.stop();

-Run the program and you will see below
output

starting
stopping
starting
stopping

-The should say starting and stoping 2 times for each car, But there is a problem we don't know which car started first and which car stopped first
-We can enhance this program to output which car is starting and which car is stopping
-This is where the fields in the class and methods in the class are connected
-The methods in a class have access to the fields as they are defined together in the class
-Also when you create c1 object
-The input

public class Car {
	String name;
	int horsePower;

	void start() {
		System.out.println("starting : " + name + " which has:" + horsePower + " horse power");
	}

	void stop() {
		System.out.println("stopping: " + name);
	}
}

-The output

starting : bmw which has:200 horse power
stopping: bmw
starting : honda which has:50 horse power
stopping: honda

-These fields are called object variables. Even though we have not defined name in the method start we were able to access it because it is part of the class
-We still have a problem
-The input

public class Application {

	public static void main(String[] args) {
		Car c1 = new Car();
		c1.name = "bmw";
		c1.horsePower = 200;
		c1.start();
		// Start one more time and see what happens
		c1.start();
		c1.stop();

		Car c2 = new Car();
		c2.name = "honda";
		c2.horsePower = 50;
		c2.start();
		c2.stop();

	}
}

The output

starting : bmw which has:200 horse power
starting : bmw which has:200 horse power
stopping: bmw
starting : honda which has:50 horse power
stopping: honda

-We were able to start the car twice without stopping
-In real scenario we can only stop after starting the car

boolean

-We have learned Java given types int, String and double
-Lets visit a new kind of data type which is given by Java called boolean 
-This data type is used when your data value can take only yes or no
-We are going to use this data type here
-Before giving the pseudo code lets walk through non programming scenario 
-Imagine you are Car object and conversations are done like below

Me:  Start the car
You: Starting
Me:  Start
You: Sorry , you have started already. You need to stop before starting again.

start method
    is started
        "sorry you have started already. you need to stop before starting again
    else
        "start" 
        started = true

-The pseudo code for boolean

stop method
    is started
        "stopping"
        started = false
    else
        "sorry,  you have not started yet. please start the car before stopping"

Summary

-fields in class are nothing but variables in class
-action in class are nothing but methods in class
-methods in class can access the fields declared in class
-boolean variables are used to store values yes or no types